{"version":3,"file":"static/js/3.6fdef558.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","webpack://samurai-way/./src/components/common/FormsComtrols/FormsControls.module.css?3156","components/common/FormsComtrols/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__7QJD2\",\"dialogsItems\":\"Dialogs_dialogsItems__lN-GC\",\"active\":\"Dialogs_active__fR-AY\",\"dialog\":\"Dialogs_dialog__0w4VQ\",\"dialogsMessages\":\"Dialogs_dialogsMessages__euBX6\",\"dialogsMessage\":\"Dialogs_dialogsMessage__S677o\",\"img\":\"Dialogs_img__5c1aT\",\"friends\":\"Dialogs_friends__Xl4p7\"};","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItem = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItem) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} className={(isActive) => isActive ? s.active : s.dialog}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return (\r\n        <div className={s.dialogsMessage}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\n\r\nimport {DialogsPageType} from \"../../redux/reducers/DialogsReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\nimport {TextArea} from \"../common/FormsComtrols/FormsControls\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    addMessage: (message: string)=> void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElement = props.dialogsPage.dialogs.map(dialog => {\r\n        return (\r\n            <div className={s.friends} key={dialog.id}>\r\n                <img className={s.img} src=\"https://cdn.onlinewebfonts.com/svg/img_266351.png\"/>\r\n                <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>\r\n            </div>\r\n        )\r\n    })\r\n    let messagesElement = props.dialogsPage.messages.map(message => <Message key={message.id} message={message.message}\r\n                                                                             id={message.id}/>)\r\n\r\n    const onClickAddNewMessage = (values: SendMessageFormDataType) => {\r\n        props.addMessage(values.message)\r\n\r\n\r\n    }\r\n\r\n\r\n    if(props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.dialogsMessages}>\r\n                <div> {messagesElement} </div>\r\n                <SendMessageReduxForm onSubmit={onClickAddNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype SendMessageFormDataType = {\r\n    message: string\r\n    resetForm: () => void\r\n}\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nexport const SendMessageForm: React.FC<InjectedFormProps<SendMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={\"message\"}\r\n                    component={TextArea}\r\n                    placeholder={\"new message\"}\r\n                    validate={[maxLength50, required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst SendMessageReduxForm = reduxForm<SendMessageFormDataType>({\r\n    form: 'message'\r\n})(SendMessageForm)\r\n","import React from 'react';\r\nimport {\r\n    addMessageAC,\r\n    DialogsActionsType,\r\n    DialogsPageType,\r\n} from \"../../redux/reducers/DialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {AppStoreType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (message: string) => void\r\n\r\n}\r\n\r\ntype DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStoreType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: DialogsActionsType) => void): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (message: string) => {\r\n            dispatch(addMessageAC(message))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__0XrZx\",\"error\":\"FormsControls_error__nXs4F\"};","import React, {ReactNode} from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\ntype TextAreaType = {\r\n    input: InputType\r\n    meta: MetaType\r\n    placeholder: string\r\n    required: boolean\r\n    children: ReactNode\r\n}\r\n\r\ntype InputType = {\r\n    name: string\r\n    onBlur: () => void\r\n    onChange: () => void\r\n    onDragStart: () => void\r\n    onDrop: () => void\r\n}\r\n\r\ntype MetaType = {\r\n    active: boolean\r\n    asyncValidating: boolean\r\n    autofilled: boolean\r\n    dirty: boolean\r\n    dispatch: () => void\r\n    error: any\r\n    touched: boolean\r\n}\r\n\r\n\r\nconst FormControl = (props: TextAreaType) => {\r\n    const {input, meta: {touched, error}, ...restProps} = props\r\n\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : \"\"}`}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const TextArea = (props: TextAreaType) =><FormControl {...props}>{<textarea {...props.input} {...props}/>}</FormControl>\r\n\r\n\r\nexport const Input = (props: TextAreaType) => <FormControl {...props}>{<input {...props.input} {...props}/>}</FormControl>\r\n\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStoreType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStoreType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","\r\n\r\n\r\nexport const required = (value: string) => {\r\n    if(value) return undefined\r\n\r\n    return \"field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n"],"names":["DialogItem","props","path","id","className","s","to","isActive","name","Message","message","maxLength50","maxLengthCreator","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","compose","connect","state","dialogsPage","isAuth","auth","dispatch","addMessage","addMessageAC","withAuthRedirect","dialogsElement","dialogs","map","dialog","src","messagesElement","messages","values","FormControl","input","meta","touched","error","hasError","children","Input","mapStateToProps","Component","restProps","value","maxLength","length","undefined"],"sourceRoot":""}