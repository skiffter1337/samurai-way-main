{"version":3,"file":"static/js/163.2411edd3.chunk.js","mappings":"2OACA,EAAwB,qBAAxB,EAAkG,6B,6ECyClG,GAAeA,EAAAA,EAAAA,KAFS,SAACC,GAAD,MAA0B,CAACC,OAAQD,EAAME,KAAKD,UAE9B,CAACE,QAAAA,EAAAA,IAAzC,EArBe,SAACC,GAQZ,OAAGA,EAAMH,QACE,SAAC,KAAD,CAAUI,GAAI,cAIrB,iBAAKC,UAAWC,EAAhB,WACI,mCACA,SAACC,EAAD,CAAgBC,SAZP,SAACC,GACdN,EAAMD,QAAQO,EAASC,MAAOD,EAASE,SAAUF,EAASG,mBAkBrDC,EAAuD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAGhF,OACI,kBAAMP,SAAUM,EAAhB,WACI,0BACI,SAACE,EAAA,EAAD,CACIC,KAAM,QACNC,KAAM,QACNC,UAAWC,EAAAA,EACXC,YAAa,QACbC,SAAU,CAACC,EAAAA,QAGnB,0BACI,SAACP,EAAA,EAAD,CACIC,KAAM,WACNC,KAAM,WACNC,UAAWC,EAAAA,EACXC,YAAa,WACbC,SAAU,CAACC,EAAAA,QAGnB,4BACI,SAACP,EAAA,EAAD,CACIC,KAAM,WACNC,KAAM,WACNC,UAAWC,EAAAA,IAJnB,kBAQA,gBAAKf,UAAWC,EAAhB,SACKS,KAEL,0BACI,6CAOHR,GAAiBiB,EAAAA,EAAAA,GAAwB,CAClDC,KAAM,SADoBD,CAE3BX,I,oGCtFH,G,QAA8B,oCAA9B,EAAyE,6B,4BC8BnEa,EAAc,SAACvB,GACqCA,EAA/CwB,MAAP,MAAsDxB,EAAxCyB,KAAOC,EAArB,EAAqBA,QAASd,EAA9B,EAA8BA,MAExBe,IAFN,OAAsD3B,EAAtD,GAEiB0B,GAAWd,GAE5B,OACI,iBAAKV,UAAS,UAAKC,EAAL,YAAsBwB,EAAWxB,EAAU,IAAzD,WACI,yBACKH,EAAM4B,WAEVD,IAAY,0BAAOf,QAKnBiB,EAAW,SAAC7B,GAAD,OAAwB,SAACuB,GAAD,kBAAiBvB,GAAjB,cAAyB,uCAAcA,EAAMwB,OAAWxB,QAG3FiB,EAAQ,SAACjB,GAAD,OAAyB,SAACuB,GAAD,kBAAiBvB,GAAjB,cAAyB,oCAAWA,EAAMwB,OAAWxB,S,4EC9C5F,IAAMoB,EAAW,SAACU,GACrB,IAAGA,EAEH,MAAO,qBAEEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GAAD,OAAmBA,GAASA,EAAMG,OAASD,EAAxB,wBAAqDA,EAArD,iBAA2EE","sources":["webpack://samurai-way/./src/Login/Login.module.css?89ef","Login/Login.tsx","webpack://samurai-way/./src/components/common/FormsComtrols/FormsControls.module.css?3156","components/common/FormsComtrols/FormsControls.tsx","utils/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__w7AHz\",\"authGroup\":\"Login_authGroup__XbO2R\",\"summary_error\":\"Login_summary_error__ddfhi\"};","import React from 'react';\r\nimport s from './Login.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../components/common/FormsComtrols/FormsControls\";\r\nimport {required} from \"../utils/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../redux/reducers/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStoreType} from \"../redux/redux-store\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    remember: boolean\r\n}\r\ntype LoginType = {\r\nloginTC: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\n const Login = (props: LoginType): JSX.Element => {\r\n\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData.email, formData.password, formData.remember)\r\n    }\r\n\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <h2>Login</h2>\r\n            <ReduxLoginForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state: AppStoreType) => ({isAuth: state.auth.isAuth})\r\n\r\nexport default connect(mapStateToProps, {loginTC}) (Login);\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={\"email\"}\r\n                    type={\"email\"}\r\n                    component={Input}\r\n                    placeholder={\"email\"}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    name={\"password\"}\r\n                    type={\"password\"}\r\n                    component={Input}\r\n                    placeholder={\"password\"}\r\n                    validate={[required]}\r\n                    />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    name={\"remember\"}\r\n                    type={\"checkbox\"}\r\n                    component={Input}\r\n                />\r\n                remember me\r\n            </div>\r\n            <div className={s.summary_error}>\r\n                {error}\r\n            </div>\r\n            <div>\r\n                <button>submit</button>\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const ReduxLoginForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__0XrZx\",\"error\":\"FormsControls_error__nXs4F\"};","import React, {ReactNode} from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\ntype TextAreaType = {\r\n    input: InputType\r\n    meta: MetaType\r\n    placeholder: string\r\n    required: boolean\r\n    children: ReactNode\r\n}\r\n\r\ntype InputType = {\r\n    name: string\r\n    onBlur: () => void\r\n    onChange: () => void\r\n    onDragStart: () => void\r\n    onDrop: () => void\r\n}\r\n\r\ntype MetaType = {\r\n    active: boolean\r\n    asyncValidating: boolean\r\n    autofilled: boolean\r\n    dirty: boolean\r\n    dispatch: () => void\r\n    error: any\r\n    touched: boolean\r\n}\r\n\r\n\r\nconst FormControl = (props: TextAreaType) => {\r\n    const {input, meta: {touched, error}, ...restProps} = props\r\n\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : \"\"}`}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const TextArea = (props: TextAreaType) =><FormControl {...props}>{<textarea {...props.input} {...props}/>}</FormControl>\r\n\r\n\r\nexport const Input = (props: TextAreaType) => <FormControl {...props}>{<input {...props.input} {...props}/>}</FormControl>\r\n\r\n\r\n","\r\n\r\n\r\nexport const required = (value: string) => {\r\n    if(value) return undefined\r\n\r\n    return \"field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n"],"names":["connect","state","isAuth","auth","loginTC","props","to","className","s","ReduxLoginForm","onSubmit","formData","email","password","remember","LoginForm","handleSubmit","error","Field","name","type","component","Input","placeholder","validate","required","reduxForm","form","FormControl","input","meta","touched","hasError","children","TextArea","value","maxLengthCreator","maxLength","length","undefined"],"sourceRoot":""}